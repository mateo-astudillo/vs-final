package vs.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import vs.App;
import vs.core.candidates.Candidate;
import vs.core.candidates.Candidates;
import vs.core.persons.Persons;
import vs.core.votes.Votes;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.sql.SQLException;
import java.util.Locale;

public class Results {
    private JPanel panel;
    private JPanel chartContainer;
    private JButton exitButton;

    public Results(App app) {
        panel.setOpaque(false);
        exitButton.addActionListener(e -> System.exit(0));
    }

    public void loadChart() {
        candidatesChart();
        //otherChart();
    }

    private void candidatesChart() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try {
            int total = Persons.getTotalNumber();
            for (Candidate c : Candidates.getCandidates()) {
                double percentageVotes = ((Votes.getVotesByCandidate(c) / (double) total)) * 100;
                dataset.addValue(percentageVotes, "votos", c.politicalParty());
            }
            double percentageBlankVotes = (Votes.getBlankVotes() / (double) total) * 100;
            dataset.addValue(percentageBlankVotes, "votos", "Voto en blanco");
        } catch (SQLException | ClassNotFoundException e) {
            new ErrorView(e);
        }

        JFreeChart barChart = ChartFactory.createBarChart(
                "Resultados de la votaciÃ³n",
                "Candidatos",
                "Votos (%)",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        ChartPanel chartPanel = new ChartPanel(barChart);

        chartContainer.add(chartPanel);
        panel.revalidate();
        panel.repaint();

    }

    private void otherChart() {
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        try {
            dataset.addValue(Persons.getNoVote(), "otros", "Sin votar");
            dataset.addValue(Persons.getTotalCancelled(), "otros", "fueron anulados");
        } catch (SQLException | ClassNotFoundException e) {
            new ErrorView(e);
        }

        JFreeChart barChart = ChartFactory.createBarChart(
                "Otros",
                "",
                "Cantidad",
                dataset,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );

        ChartPanel chartPanel = new ChartPanel(barChart);
        chartContainer.add(chartPanel);
        panel.revalidate();
        panel.repaint();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        panel = new JPanel();
        panel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        chartContainer = new JPanel();
        chartContainer.setLayout(new BorderLayout(30, 30));
        chartContainer.setOpaque(false);
        panel.add(chartContainer, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        exitButton = new JButton();
        Font exitButtonFont = this.$$$getFont$$$(null, -1, 24, exitButton.getFont());
        if (exitButtonFont != null) exitButton.setFont(exitButtonFont);
        exitButton.setHorizontalTextPosition(0);
        exitButton.setText("Cerrar");
        panel.add(exitButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return panel;
    }

    public JPanel getPanel() {
        return panel;
    }
}